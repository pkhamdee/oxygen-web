1. Start PostgreSQL with Docker to check the operation of the application locally. Open a new terminal and run the following command.

docker run --rm \
 -p 5432:5432 \
 -e POSTGRES_DB=oxygendata \
 -e POSTGRES_USER=postgres \
 -e POSTGRES_PASSWORD=postgres \
 bitnami/postgresql:11.11.0-debian-10-r59

2.  build package
    ./gradlew clean build

3.  Launch the application
    ./gradlew bootRun

4.  Test app

get all record (GET)
curl -v http://localhost:8080/users | jq .

get user
curl -v http://localhost:8080/user/1 | jq .

create user record (POST)
curl -d @user.json -H "Content-Type: application/json" http://localhost:8080/user
or
curl -d "{\"firstName\":\"somechai\",\"lastName\":\"ratcha\"}" -H "Content-Type: application/json" http://localhost:8080/user

update
curl -d "{\"firstName\":\"test\",\"lastName\":\"pass\"}" -H 'Content-Type: application/json' -X PUT http://localhost:8080/user/1

delete
curl -X DELETE http://localhost:8080/user/1

5. creat container
   ./gradlew jib -Djib.from.image=gcr.io/distroless/java -Djib.to.image=<docker-repository>/oxygen-data

6. Device endpoint
   get all record (GET)
   curl -v http://localhost:8080/devices

get device
curl -v http://localhost:8080/device/1

create device record (POST)
curl -d @device.json -H "Content-Type: application/json" http://localhost:8080/device
or
curl -d "{\"name\":\"test\",\"type\":\"test\"}" -H "Content-Type: application/json" http://localhost:8080/device

update
curl -d "{\"name\":\"test\",\"type\":\"pass\"}" -H 'Content-Type: application/json' -X PUT http://localhost:8080/device/1

delete
curl -X DELETE http://localhost:8080/device/1

7. UserDevice endpoint
   get all record (GET)
   curl -v http://localhost:8080/userdevices | jq .

get device
curl -v http://localhost:8080/userdevice/1

create userdevice record (POST)
curl -d @device.json -H "Content-Type: application/json" http://localhost:8080/userdevice
or
curl -d "{\"deviceId\":1,\"userId\":1}" -H "Content-Type: application/json" http://localhost:8080/userdevice

update
curl -d "{\"deviceId\":1,\"userId\":2}" -H 'Content-Type: application/json' -X PUT http://localhost:8080/userdevice/1

delete
curl -X DELETE http://localhost:8080/userdevice/1

run app from repository
docker run --rm \
 -p 8080:8080 \
 -e spring.datasource.url=jdbc:postgresql://192.168.0.100:5432/oxygendata \
 pkhamdee/oxygen-data

////////////////////////////////////////

curl -d "{\"name\":\"090000001\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000001\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000002\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000002\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000003\",\"type\":\"test\",\"status\":\"2\",\"barcode\":\"000000003\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000004\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000004\"}" -H "Content-Type:application/json" http://localhost:8080/device

///////////////////////////////

curl -d "{\"name\":\"090000001\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000001\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000002\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000002\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000003\",\"type\":\"test\",\"status\":\"2\",\"barcode\":\"000000003\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"name\":\"090000004\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000004\"}" -H "Content-Type:application/json" http://localhost:8080/devicecurl -d "{\"name\":\"090000001\",\"type\":\"test\",\"status\":\"4\",\"barcode\":\"000000001\"}" -H "Content-Type:application/json" http://localhost:8080/device

curl -d "{\"firstName\":\"MR1\",\"lastName\":\"Sur1\",\"type\":\"3\"}" -H "Content-Type: application/json" http://localhost:8080/user

curl -d "{\"firstName\":\"MS1\",\"lastName\":\"Sur1\",\"type\":\"2\"}" -H "Content-Type: application/json" http://localhost:8080/user

curl -d "{\"firstName\":\"MR2\",\"lastName\":\"Sur2\",\"type\":\"3\"}" -H "Content-Type: application/json" http://localhost:8080/user

curl -d "{\"firstName\":\"MS2\",\"lastName\":\"Sur2\",\"type\":\"3\"}" -H "Content-Type: application/json" http://localhost:8080/user

To test
docker run --rm \
 -p 5432:5432 \
 -e POSTGRES_DB=oxygendata \
 -e POSTGRES_USER=postgres \
 -e POSTGRES_PASSWORD=postgres \
 bitnami/postgresql:11.11.0-debian-10-r59

run app from repository
docker run --rm \
 -p 8080:8080 \
 -e spring.datasource.url=jdbc:postgresql://192.168.0.100:5432/oxygendata \
 pkhamdee/oxygen-data

///////////////////////////////////////////////////

curl -d "{\"firstName\":\"MR123\",\"lastName\":\"Sur123\",\"type\":\"1\",\"userName\":\"123\",\"passwd\":\"123\"}" -H "Content-Type: application/json" http://localhost:8080/user

curl -d "{\"firstName\":\"MR456\",\"lastName\":\"Sur456\",\"type\":\"2\",\"userName\":\"456\",\"passwd\":\"456\"}" -H "Content-Type: application/json" http://localhost:8080/user

curl -d "{\"firstName\":\"MR789\",\"lastName\":\"Sur789\",\"type\":\"3\",\"userName\":\"789\",\"passwd\":\"789\"}" -H "Content-Type: application/json" http://localhost:8080/user


///////////////////////////////////////////////////


get user, GET
http://localhost:8080/users

create user, POST
http://localhost:8080/user
{
 "firstName": "pongsak",
 "lastName": "khamdee"
}

update user, PUT
http://localhost:8080/user/1
{
 "firstName": "pongsak",
 "lastName": "khamdee",
 "userName": "pkhamdee123"
}

get user by user name, GET
http://localhost:8080/user/username/pkhamdee

get device, GET
http://localhost:8080/devices

create device, POST
http://localhost:8080/device
{
            "name": "test",
        }

create device + user, POST
http://localhost:8080/devices
{
            "name": "test123",
            "user" : {
               "firstName": "pongsak"
            }
        }

update device , PUT       
http://localhost:8080/device/2
{
            "name": "test id 2",
            "user": {
                "firstName": "pongsak khamdee"
            }   
        }


update device will do not update user,  have to explicit call update user api.     
http://localhost:8080/device/2
{
            "name": "test id 2",
            "user": {
                "firstName": "pongsak khamdee"
            }   
        }

get device by status, GET
http://localhost:8080/device/status/0

get device by total device by status, GET 
http://localhost:8080/device/status/0/total


constant
device
status; //1=unknown, 2=inused, 3=returned, 4=available

user 
gender; //1=male, 2=female
type; //1=admin, 2=resuer, 3=patient 
status; //1=unknown, 2=admit, 3=selfisolation, 4=recovered, 5=dead
severity; //1=unknown, 2=low, 3=moderate, 4=severe




(new)
get user by first name, GET
http://localhost:8080/user/firstname/pongsak


(new)
get user by type.
http://localhost:8080/user/type/0
http://localhost:8080/user/type/0/total




